~2021-DEC

It seems in Debian releases post buster that phantomjs / casperjs have issues
with TLS / SSL. Quick testing: spider worked for non https URI's üòê

First it looks like an omv upgrade removed nodejs from the system. The following
steps resolve that:

<shell-commands>

### ‚ö†‚ö†‚ö† WARNING ‚ö†‚ö†‚ö† ###
# This is a deprecated approach to installing nodejs.
# Today use nvm! https://github.com/nvm-sh/nvm

# inspect the installer script
curl -L https://deb.nodesource.com/setup_17.x |vim -

# if OK/SAFE then install
curl -fsSL https://deb.nodesource.com/setup_17.x | bash -x -

# ensure to review the output to see everything was OK and SAFE/SECURE.

# finally install nodejs
apt-get install nodejs

</shell-commands>

Note that phantomjs and casperjs both seem to be deprecated
casperjs: This repository has been archived by the owner. It is now read-only. 
https://github.com/casperjs/casperjs

phantomjs: Package renamed to phantomjs-prebuilt.
Please update 'phantomjs' package references to 'phantomjs-prebuilt'
https://www.npmjs.com/package/phantomjs

phantomjs-prebuilt: This package has been deprecated
https://www.npmjs.com/package/phantomjs-prebuilt
https://github.com/Medium/phantomjs
WARNING: This repository and NPM package are now deprecated since PhantomJS
development had been suspended.

This looks like the original repo of phantomjs
https://github.com/ariya/phantomjs
read: Archiving the project: suspending the development #15344
https://github.com/ariya/phantomjs/issues/15344

OK, once I got node installed I had some issues running the script, probably due
to cruft/old packages so this was my approach to solve this:

üí° First, I took backups!

<shell-commands>

# I tried a simple npm update but that actually nuked everything :(
root@hostname:/srv/mstore/!incoming/spider# npm update

<shell-output>

removed 114 packages, and audited 1 package in 1s

found 0 vulnerabilities
npm notice
npm notice New minor version of npm available! 8.1.4 -> 8.3.0
npm notice Changelog: https://github.com/npm/cli/releases/tag/v8.3.0
npm notice Run npm install -g npm@8.3.0 to update!
npm notice

</shell-output>

# here is what helped in the end, from the spider dir as root
npm install -g npm@8.3.0
npm install casperjs phantomjs-prebuilt --save

</shell-commands>

üí° IMPORTANT NOTE: It seems in the past I had not used --save which means the
package.json isn't created?

The first error I got was:
<shell-output>
Auto configuration failed
139830042541696:error:25066067:DSO support routines:DLFCN_LOAD:could not load the shared library:dso_dlfcn.c:185:filename(libssl_conf.so): libssl_conf.so: cannot open shared object file: No such file or directory
139830042541696:error:25070067:DSO support routines:DSO_load:could not load the shared library:dso_lib.c:244:
139830042541696:error:0E07506E:configuration file routines:MODULE_LOAD_DSO:error loading dso:conf_mod.c:285:module=ssl_conf, path=ssl_conf
139830042541696:error:0E076071:configuration file routines:MODULE_RUN:unknown module name:conf_mod.c:222:module=ssl_conf
</shell-output>

I think sorting out the npm and packges fixed the above error? I cannot
reproduce it anymore. üòê

# I was able to mute that error by prepending/setting env var:
OPENSSL_CONF="/dev/null"

BUT I think that just masked the issue?

I was able to get the script to work by adding --ignore-ssl-errors=yes, the
--ssl-protocol=TLSv1.2 is just to max out phantomjs supported TLS version as a
best practice.

<shell-commands>
PATH=$PATH:node_modules/phantomjs-prebuilt/bin node_modules/casperjs/bin/casperjs --ssl-protocol=TLSv1.2 --ignore-ssl-errors=yes spider.js
</shell-commands>

It is strange that --ignore-ssl-errors=no does not actually output any SSL
errors :(
This issue cost a few hours to figure out and only by trial and error did I find
a solution
‚ùì Q: what is muting the ssl errors?

Even running the spider.js with debug settings doesn't help show the SSL
errors, but debug settings helped a little, THE CLUES were null properties of
the resposne object and:

<shell-output>
[info] [phantom] ...uri... (HTTP 0)
</shell-output>

A 0 http response code? WTF üíÄ

Only once I tried a non https uri did things really *click* and I played around
with the phantomjs TLS related arguments until I got it working.


-----

The next issue was a strange WARN from aria2c:
<shell-output>
12/15 06:49:01 [WARN] aria2c had to connect to the other side using an unknown TLS protocol. The integrity and confidentiality of the connection might be compromised.
</shell-output>

However this turned out to be a non-issue
see: https://unix.stackexchange.com/a/523465/19406

Once upgraded to bullseye this WARN *should* go away.

see: https://github.com/aria2/aria2/issues/1488
It was quite useful to discover:
aria2c https://www.howsmyssl.com/a/check && cat check

This shows the TLS properties for the aria2c connection includig TLS versions
and ciphers.

-----

2024-05-29

The kvm has been upgraded from Debian 10 to 12, nodejs is currently using the
distro version: v18.13.0. üò≤ Surprisingly, things seem to still work.

npm does not appear to be installed - removed during dist upgrades I assume.

It probably makes sense to purge the distro nodejs and use the nvm util on
specific user account(s) to manage nodejs/npm installs and versions.
see coda.io home-network-stuff project

Observation: the https://www.howsmyssl.com/a/check tool would need to be run for
casperjs and aria2c and anything else doing http requests, not just aria2c.
One would assume that casperjs does not implment its own TLS and uses nodejs
libs for that? but 'config limits' may be present, set to older TLS and cipher
suites etc.
Currently there are some hardcoded TLS options in the script(s) that maybe cause
issues in the future as server endpoints are upgraded over time.
üí° EDIT: 2024-06-02 seems these workarounds are no longer needed on Debain 12
(bookworm)

Observation: As expected, the WARN about unknown TLS in aria2c is resolved after
the dist-upgrade(s).

There is probably a high risk of trying to update the npm packages for this tool
because of the deprecated/abandoned libs.
I will take a backup and give it a try, fingers crossed.

‚úÖ took a backup, see archive folder

... a few moments later ...

<shell-commands>

‚úÖ aptitude -o Aptitude::Delete-Unused=1 -o Aptitude::Purge-Unused=1 purge nodejs

# as non root user

# install nvm üîê review install.sh first to see its SAFE/SANE
curl -sSL 'https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh' | bash

nvm install node

# exit shell, relaunch to get latest env/sources
# node and npm should be available

nvm install-latest-npm

# ‚úÖ recursive-downloader2.sh / spider.js was still working after this


# ... now to test npm update ...

npm update

<shell-output>
npm warn deprecated phantomjs-prebuilt@2.1.16: this package is now deprecated

added 10 packages, removed 26 packages, changed 65 packages, and audited 106 packages in 10s

18 packages are looking for funding
  run `npm fund` for details

4 vulnerabilities (3 moderate, 1 high)

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.
npm notice
npm notice New minor version of npm available! 10.7.0 -> 10.8.1
npm notice Changelog: https://github.com/npm/cli/releases/tag/v10.8.1
npm notice To update run: npm install -g npm@10.8.1
npm notice

</shell-output>
</shell-commands>

recursive-downloader.sh / spider.js are still working as expected including a
recursive test. Happy days! After the kvm distro, nodejs, npm, and
kernel updates spider.js feels a bit faster :)

I've tested spider.js without the launch workarounds, seems OK, so I've
commented out the workarounds in recursive-downloader.sh

TODO It would be interesting to have casperjs call:
https://www.howsmyssl.com/a/check to see how it scores.

TODO - can anything be done about the vunls?

<shell-commands>

npm audit

<shell-output>
npm audit report

casperjs  *
Severity: high
Improperly Controlled Modification of Dynamically-Determined Object Attributes in casperjs - https://github.com/advisories/GHSA-vrr3-5r3v-7xfw
No fix available
node_modules/casperjs

request  *
Severity: moderate
Server-Side Request Forgery in Request - https://github.com/advisories/GHSA-p8p7-x288-28g6
Depends on vulnerable versions of tough-cookie
No fix available
node_modules/request
  phantomjs-prebuilt  *
  Depends on vulnerable versions of request
  node_modules/phantomjs-prebuilt

tough-cookie  <4.1.3
Severity: moderate
tough-cookie Prototype Pollution vulnerability - https://github.com/advisories/GHSA-72xf-g2v4-qvf3
No fix available
node_modules/tough-cookie

4 vulnerabilities (3 moderate, 1 high)

Some issues need review, and may require choosing a different dependency.

</shell-output>
</shell-commands>

-----

2024-06-05

When a recent dist-upgrade to Debian 12 bookworm broke my install of yt-dlp...
while solving the issue and fixing my aliases and functions, I rediscovered/rem-
embered that that yt-dlp has a dependency on phantomjs:
> Used in extractors where javascript needs to be run.

EXPLOITS

It might be possible to use snyk-protect package to mitigate known/patchable
exploits: https://www.npmjs.com/package/@snyk/protect
Worth testing at least!

An example repo (casperjs fork) which has a snyk PR related to the exploits:
https://github.com/hudl/casperjs/pull/19/files
